// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
// swift-module-flags: -target x86_64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SlotPicker
import Combine
import Foundation
@_exported import SlotPicker
import Swift
import UIKit
import _Concurrency
public protocol SlotPickerDelegate : AnyObject {
  func slotPicker(didSelectSlots slots: [SlotPicker.Slot])
}
public protocol SlotPickerDataSource : AnyObject {
  func initialController() -> UIKit.UIViewController
  func preSelectedSlots() -> [SlotPicker.Slot]
}
extension SlotPicker.SlotPickerDelegate {
  public func slotPicker(didSelectSlots slots: Foundation.Date)
}
@_hasMissingDesignatedInitializers public class Slot : Swift.Hashable {
  public var startsAt: Foundation.Date
  public var endsAt: Foundation.Date {
    get
  }
  public var duration: Swift.Int
  public static func == (lhs: SlotPicker.Slot, rhs: SlotPicker.Slot) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
public struct Config {
  public static var shared: SlotPicker.Config
  public var SlotDiffrenceMultiple: Swift.Int
  public var MinimumSlotDuration: Swift.Int
  public var MaximumSlotDuration: Swift.Int
  public var slotInterval: Swift.Int
  public var canSelectMultipleSlots: Swift.Bool
  public var showSelectionController: Swift.Bool
  public var defautStartDate: Foundation.Date
  public var defaultEndDate: Foundation.Date
}
public class SlotPickerView {
  weak public var delegate: SlotPicker.SlotPickerDelegate?
  weak public var dataSource: SlotPicker.SlotPickerDataSource?
  convenience public init()
  required public init(configuration: SlotPicker.Config)
  required public init?(coder aDecoder: Foundation.NSCoder)
  public func showPicker(from viewController: UIKit.UIViewController)
  @objc deinit
}
extension Foundation.Date {
  public func dateByAddingDays(component: Foundation.Calendar.Component, count: Swift.Int) -> Foundation.Date
  public var startOfDay: Foundation.Date {
    get
  }
  public var endOfDay: Foundation.Date {
    get
  }
  public func changeTimeInDate(hour: Swift.Int, min: Swift.Int) -> Foundation.Date?
  public func isSameDay(with: Foundation.Date) -> Swift.Bool
}
